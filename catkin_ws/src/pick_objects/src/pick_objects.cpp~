#include <ros/ros.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#include <std_msgs/Int32.h>

// Define a client for to send goal requests to the move_base server through a SimpleActionClient
typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

int main(int argc, char** argv){
  // Initialize the simple_navigation_goals node
  ros::init(argc, argv, "pick_objects");

  ///////////////////////////
  ros::NodeHandle n;
  ros::Publisher location_pub = n.advertise<std_msgs::Int32>("/location_update", 1);
  std_msgs::Int32 msg;
  msg.data = 1;
  ///////////////////////////

  //tell the action client that we want to spin a thread by default
  MoveBaseClient ac("move_base", true);

  // Wait 5 sec for move_base action server to come up
  while(!ac.waitForServer(ros::Duration(5.0))){
    ROS_INFO("Waiting for the move_base action server to come up");
  }
  location_pub.publish(msg);

  move_base_msgs::MoveBaseGoal goal;

  // set up the frame parameters
  goal.target_pose.header.frame_id = "map";
  goal.target_pose.header.stamp = ros::Time::now();

  // Define a position and orientation for the robot to reach
  goal.target_pose.pose.position.x = 37.0;
  goal.target_pose.pose.position.y = 37.0;
  goal.target_pose.pose.orientation.w = 1.0;

   // Send the goal position and orientation for the robot to reach
  ROS_INFO("Sending goal");

  ac.sendGoal(goal);

  // Wait an infinite time for the result
  ac.waitForResult();
  
  // Check if the robot reached its goal
  if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
    ROS_INFO("Hooray, the base first goal location");
  else
    ROS_INFO("The base failed to move first location");

  // Wait 5 sec after reaching pickupzone
  ROS_INFO("Waiting For 5 seconds at pickup zone");
  ros::Time run_till = ros::Time::now() + ros::Duration(5);
  while (ros::Time::now() < run_till){
  msg.data =2;
  location_pub.publish(msg);
  }
  
  // Define a second position and orientation for the robot to reach
  goal.target_pose.pose.position.x = 40.0;
  goal.target_pose.pose.position.y = 40.0;
  goal.target_pose.pose.orientation.w = 1.5;

   // Send the goal position and orientation for the robot to reach
  ROS_INFO("Sending second goal");
  ac.sendGoal(goal);

  // Wait an infinite time for the results
  ac.waitForResult();

  // Check if the robot reached its goal
  if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED){
    ROS_INFO("Hooray, the base moved to second goal location");
    msg.data = 3;
    location_pub.publish(msg);
    }
  else
    ROS_INFO("The base failed to move to second goal location");

  return 0;
}
